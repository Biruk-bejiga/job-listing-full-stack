// Prisma schema for MongoDB

// Prisma schema for Job Listing App targeting MongoDB
// Use `DATABASE_URL` to point to your MongoDB connection string.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Role values: 'developer' and 'employer'
enum Role {
  developer
  employer
  admin
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(developer)
  image         String?

  // Relations
  accounts     Account[]     @relation("UserAccounts")
  jobs         Job[]         @relation("EmployerJobs")
  applications Application[] @relation("ApplicantApplications")
  sessions     Session[]     @relation("UserSessions")

  @@map("users")
}

// NextAuth models for Prisma adapter (MongoDB)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation("UserAccounts", fields: [userId], references: [id])

  @@index([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation("UserSessions", fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  company     String
  location    String
  salary      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employerId String @db.ObjectId
  employer   User   @relation(fields: [employerId], references: [id], name: "EmployerJobs")

  applications Application[] @relation("JobApplications")

  @@index([employerId])
  @@map("jobs")
}

model Application {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  jobId String @db.ObjectId
  job   Job    @relation(fields: [jobId], references: [id], name: "JobApplications")

  applicantId String @db.ObjectId
  applicant   User   @relation(fields: [applicantId], references: [id], name: "ApplicantApplications")

  resumeURL   String?
  coverLetter String?
  createdAt   DateTime @default(now())

  @@index([jobId])
  @@index([applicantId])
  @@map("applications")
}
